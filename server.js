/**
 * @file server.js
 * @module server
 * @brief Point d'entr√©e du serveur Node.js pour Ticket Bus CM.
 * @description Initialise la connexion √† la base de donn√©es MongoDB et d√©marre l'application Express sur le port d√©fini dans les variables d'environnement.
 * @see app.js pour la configuration de l'application
 * @see config/db.js pour la connexion √† la base de donn√©es
 *
 * @author UV PROJET CODE Team
 * @version 1.0
 * @date 2024-06-01
 */
// server.js
const app = require('./app');
const connectDB = require('./config/db');
const Schedule = require('./models/Schedule');
const cron = require('node-cron');
require('dotenv').config();

const PORT = process.env.PORT || 5000;

// Connexion √† la base de donn√©es puis d√©marrage du serveur
connectDB().then(() => {
  app.listen(PORT, () => {
    console.log(`üöÄ Serveur pr√™t et √† l'√©coute sur le port ${PORT}`);
  });

  // T√¢che planifi√©e : suppression des schedules expir√©s toutes les 5 minutes
  cron.schedule('*/5 * * * *', async () => {
    try {
      const result = await Schedule.deleteMany({ date_depart: { $lte: new Date() } });
      if (result.deletedCount > 0) {
        console.log(`[CRON] Schedules supprim√©s : ${result.deletedCount}`);
      }
    } catch (err) {
      console.error('[CRON] Erreur lors de la suppression des schedules expir√©s :', err.message);
    }
  });
});